#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
# Usage
#   GenSA(par, lower, upper, fn, control=list(), ...)
#
# Arguments
#   par Vector. Initial values for the components to be optimized. Default is NULL, in which case, default values will be generated automatically.
#   lower     Vector with length of par. Lower bounds for components.
#   upper     Vector with length of par. Upper bounds for components.
#   fn        A function to be minimized, with first argument the vector of parameters over which minimization is to take place. It should return a scalar result.
#   ...       allows the user to pass additional arguments to the function fn.
#   control   The argument is a list that can be used to control the behavior of the algorithm:
# maxit: Integer. Maximum number of iterations of the algorithm.
# threshold.stop: Numeric. The program will stop when the expected objective function value threshold.stop is reached. Default value is NULL
# nb.stop.improvement: Integer. The program will stop when there is no any improvement in nb.stop.improvement steps.
# smooth: Logical.TRUE when the objective function is smooth, or differentiable almost everywhere in the region of par, FALSE otherwise. Default value is TRUE.
# max.call: Integer. Maximum number of call of the objective function. Default is set to 1e7.
# max.time: Numeric. Maximum running time in seconds.
# temp: Numeric. Initial value for temperature.
# visiting.param: Numeric. Parameter for visiting distribution.
# acceptance.param: Numeric. Parameter for acceptance distribution.
# verbose: Logical. TRUE means that messages from the algorithm are shown. Default is FALSE.
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
print(length(vAlloc))
print(length(vScores))
vAlloc_Aug <- cbind(vAlloc, as.vector(nSeats - sum(vAlloc))
print(length(vAlloc_Aug))
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Options # # #
# # # Set Call # # #
Out <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
# Usage
#   GenSA(par, lower, upper, fn, control=list(), ...)
#
# Arguments
#   par Vector. Initial values for the components to be optimized. Default is NULL, in which case, default values will be generated automatically.
#   lower     Vector with length of par. Lower bounds for components.
#   upper     Vector with length of par. Upper bounds for components.
#   fn        A function to be minimized, with first argument the vector of parameters over which minimization is to take place. It should return a scalar result.
#   ...       allows the user to pass additional arguments to the function fn.
#   control   The argument is a list that can be used to control the behavior of the algorithm:
# maxit: Integer. Maximum number of iterations of the algorithm.
# threshold.stop: Numeric. The program will stop when the expected objective function value threshold.stop is reached. Default value is NULL
# nb.stop.improvement: Integer. The program will stop when there is no any improvement in nb.stop.improvement steps.
# smooth: Logical.TRUE when the objective function is smooth, or differentiable almost everywhere in the region of par, FALSE otherwise. Default value is TRUE.
# max.call: Integer. Maximum number of call of the objective function. Default is set to 1e7.
# max.time: Numeric. Maximum running time in seconds.
# temp: Numeric. Initial value for temperature.
# visiting.param: Numeric. Parameter for visiting distribution.
# acceptance.param: Numeric. Parameter for acceptance distribution.
# verbose: Logical. TRUE means that messages from the algorithm are shown. Default is FALSE.
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
print(length(vAlloc))
print(length(vScores))
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
print(length(Alloc_CCA77))
vAlloc_Aug <- cbind(vAlloc, Alloc_CCA77)
print(length(vAlloc_Aug))
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Options # # #
# # # Set Call # # #
Out <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
nrow(vScores)
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
# Usage
#   GenSA(par, lower, upper, fn, control=list(), ...)
#
# Arguments
#   par Vector. Initial values for the components to be optimized. Default is NULL, in which case, default values will be generated automatically.
#   lower     Vector with length of par. Lower bounds for components.
#   upper     Vector with length of par. Upper bounds for components.
#   fn        A function to be minimized, with first argument the vector of parameters over which minimization is to take place. It should return a scalar result.
#   ...       allows the user to pass additional arguments to the function fn.
#   control   The argument is a list that can be used to control the behavior of the algorithm:
# maxit: Integer. Maximum number of iterations of the algorithm.
# threshold.stop: Numeric. The program will stop when the expected objective function value threshold.stop is reached. Default value is NULL
# nb.stop.improvement: Integer. The program will stop when there is no any improvement in nb.stop.improvement steps.
# smooth: Logical.TRUE when the objective function is smooth, or differentiable almost everywhere in the region of par, FALSE otherwise. Default value is TRUE.
# max.call: Integer. Maximum number of call of the objective function. Default is set to 1e7.
# max.time: Numeric. Maximum running time in seconds.
# temp: Numeric. Initial value for temperature.
# visiting.param: Numeric. Parameter for visiting distribution.
# acceptance.param: Numeric. Parameter for acceptance distribution.
# verbose: Logical. TRUE means that messages from the algorithm are shown. Default is FALSE.
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
print(length(vAlloc))
print(length(vScores))
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
print(length(Alloc_CCA77))
vAlloc_Aug <- rbind(vAlloc, Alloc_CCA77)
print(length(vAlloc_Aug))
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Options # # #
# # # Set Call # # #
Out <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
# Usage
#   GenSA(par, lower, upper, fn, control=list(), ...)
#
# Arguments
#   par Vector. Initial values for the components to be optimized. Default is NULL, in which case, default values will be generated automatically.
#   lower     Vector with length of par. Lower bounds for components.
#   upper     Vector with length of par. Upper bounds for components.
#   fn        A function to be minimized, with first argument the vector of parameters over which minimization is to take place. It should return a scalar result.
#   ...       allows the user to pass additional arguments to the function fn.
#   control   The argument is a list that can be used to control the behavior of the algorithm:
# maxit: Integer. Maximum number of iterations of the algorithm.
# threshold.stop: Numeric. The program will stop when the expected objective function value threshold.stop is reached. Default value is NULL
# nb.stop.improvement: Integer. The program will stop when there is no any improvement in nb.stop.improvement steps.
# smooth: Logical.TRUE when the objective function is smooth, or differentiable almost everywhere in the region of par, FALSE otherwise. Default value is TRUE.
# max.call: Integer. Maximum number of call of the objective function. Default is set to 1e7.
# max.time: Numeric. Maximum running time in seconds.
# temp: Numeric. Initial value for temperature.
# visiting.param: Numeric. Parameter for visiting distribution.
# acceptance.param: Numeric. Parameter for acceptance distribution.
# verbose: Logical. TRUE means that messages from the algorithm are shown. Default is FALSE.
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
print(length(vAlloc))
print(length(vScores))
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
print(length(Alloc_CCA77))
vAlloc_Aug <- c(vAlloc, Alloc_CCA77)
print(length(vAlloc_Aug))
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Options # # #
# # # Set Call # # #
Out <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
# Usage
#   GenSA(par, lower, upper, fn, control=list(), ...)
#
# Arguments
#   par Vector. Initial values for the components to be optimized. Default is NULL, in which case, default values will be generated automatically.
#   lower     Vector with length of par. Lower bounds for components.
#   upper     Vector with length of par. Upper bounds for components.
#   fn        A function to be minimized, with first argument the vector of parameters over which minimization is to take place. It should return a scalar result.
#   ...       allows the user to pass additional arguments to the function fn.
#   control   The argument is a list that can be used to control the behavior of the algorithm:
# maxit: Integer. Maximum number of iterations of the algorithm.
# threshold.stop: Numeric. The program will stop when the expected objective function value threshold.stop is reached. Default value is NULL
# nb.stop.improvement: Integer. The program will stop when there is no any improvement in nb.stop.improvement steps.
# smooth: Logical.TRUE when the objective function is smooth, or differentiable almost everywhere in the region of par, FALSE otherwise. Default value is TRUE.
# max.call: Integer. Maximum number of call of the objective function. Default is set to 1e7.
# max.time: Numeric. Maximum running time in seconds.
# temp: Numeric. Initial value for temperature.
# visiting.param: Numeric. Parameter for visiting distribution.
# acceptance.param: Numeric. Parameter for acceptance distribution.
# verbose: Logical. TRUE means that messages from the algorithm are shown. Default is FALSE.
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
vAlloc_Aug <- c(vAlloc, Alloc_CCA77)
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Options # # #
# # # Set Call # # #
Out <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
str(Out)
Out$par
fix(Out)
findInterval(.5, c(0, .2, .3, .6, 1.0))
vTransProbs <- runif(10)
vTransProbs
vTransProbs <- vTransProbs/sum(vTransProbs)
vTransProbs
sum(vTransProbs)
x <- vTransProbs + c(0, vTransProbs)
vCumTransProbs <- c(vTransProbs, 0) + c(0, vTransProbs)
vTransProbs
vCumTransProbs
vCumTransProbs <- cumsum(vTransProbs)
vTransProbs
vCumTransProbs
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
MyDir <- "C:\Users\nmader\Documents\Econ\Chapin Hall Projects\Head Start Reallocation\Code"
#######################
# Create General Setup
#######################
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
vAlloc_Aug <- c(vAlloc, Alloc_CCA77)
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Function for Selecting Neighbors # # #
# Load distances between CCAs
#tDist <- read.csv2(file = paste(MyDir, "Raw Data/CCA Distance Matrix.csv", sep=""), sep = ",", header = TRUE)
tDist <- matrix(data = runif(nCCA^2), nrow=nCCA)
tDist
####################################################
#
# TEST SIMULATED ANNEALING METHOD USING SIMPLE SETUP
#
#   The objective function is to allocate seats to
#   odd-numbered community areas.
#
####################################################
#install.packages("GenSA")
library(GenSA)
# See documentation at http://cran.r-project.org/web/packages/GenSA/GenSA.pdf
MyDir <- "C:\Users\nmader\Documents\Econ\Chapin Hall Projects\Head Start Reallocation\Code"
#####################
# Set Run Parameters
#####################
RunGenSA    <- 0
RunSimpleSA <- 1
#######################
# Create General Setup
#######################
# # # Set Initial Allocation and Counts # # #
nCCA <- 77
nSeats <- 20000
vAlloc0 <- as.vector(rep(0, nCCA-1)) # We represent the constraint by leaving one out, since it is mechanically related to the other allocations.
vAlloc0[1] <- nSeats
vLowerBound <- as.vector(rep(0, nCCA-1))
vUpperBound <- as.vector(rep(nSeats, nCCA-1))
# # # Set Function To Be Minimized # # #
# We'll choose only odd numbered Community Areas, with score equal to their Community Number
vScores <- as.vector(1:nCCA)
vScores[(vScores %% 2) == 0] <- -1 # I.e. zero-out even scores
Obj <- function(vAlloc) {
Alloc_CCA77 <- as.vector(nSeats - sum(vAlloc))
vAlloc_Aug <- c(vAlloc, Alloc_CCA77)
-(t(vAlloc_Aug) %*% vScores)
}
# # # Set Function for Selecting Neighbors # # #
# Load distances between CCAs
#tDist <- read.csv2(file = paste(MyDir, "Raw Data/CCA Distance Matrix.csv", sep=""), sep = ",", header = TRUE)
tDist <- matrix(data = runif(nCCA^2), nrow=nCCA)
mDist <- as.matrix(tDist)
mInvDist <- solve(mDist)
ReAlloc <- function(State0, mInvDist) {
# Randomly select a community area to pull seat from
FromRow <- ceiling(runif(1)*nCCA)
# Randomly select a community area to send seat to
vTransProbs <- mInvDist[FromRow]/sum(mInvDist[FromRow])
vCumTransProbs <-
ToRow <- findInterval(runif(), vTransProbs)
# Reassign
State_n <- State0[FromRow] - 1
State_n <- State0[ToRow]   + 1
return(State_n)
}
# # # Establish a Temperature Function # # #
Temp <- function(State0, Iter, MaxIter) {
# For now, keeping this very simple
return(Iter/MaxIter)
}
##################################
# Attempt Use of the GenSA Package
##################################
# # # Try Calling GenSA Method # # #
if 1 == RunGenSA     Out_GenSA <- GenSA(par = vAlloc0, lower = vLowerBound, upper = vUpperBound, fn = Obj, control=list(maxit = 10000))
# # # Try Calling Simple Method # # #
if 1 == RunSimpleSA Out_SimpleSA <- simulated_annealing(cost = Obj,
s0 = vAlloc0,
neighbor = Realloc,
temperature = Temp,
iterations = 1000,
keep_best = TRUE,
trace = TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
i <- 100
s <- 200
print(paste("Step ", i, ": s   = ", s,   sep="")
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
1:(3-1)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/.active-rstudio-document')
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
Out_SimpleSA
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
Out_MySA
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
MySA
Out_MySA
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.0.r', echo=TRUE)
ReAlloc(vAlloc0_MySA)
ReAlloc(vAlloc0_MySA, mInvDist)
ReAlloc(vAlloc0_MySA, mInvDist)
ReAlloc(vAlloc0_MySA, mInvDist)
ReAlloc(vAlloc0_MySA, mInvDist)
ReAlloc(vAlloc0_MySA, mInvDist)
seq(1:4)
seq(1:4)[2]
help(sample)
x <- matrix(runif(100), nrow=10)
x
diag(x) <- 0
x
mInvDist
view(mInvDist)
View(mInvDist)
seq(1:10)
x <- seq(1:10)
x
y = c(4,6)
x[-y]
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simple Simulated Annealing Method.R', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v0.5 - Troubleshooting Runs.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Simulated Annealing Mockup v1.0 - Procedure is running cleanly.r', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Map Simulated Annealing Results.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
order(shpCCA_History$AREA_NUMBE)
vSeats[order(shpCCA_History$AREA_NUMBE)]
CHK
chk
findInterval(vSeats[order(shpCCA_History$AREA_NUMBE)], BreakInts, all.inside=TRUE)
BreakInts
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
print()
print(\n)
print('\n')
print(%\n)
print("%\n")
x <- \n
print("")
source('~/Econ/Chapin Hall Projects/Head Start Reallocation/Code/Map Simulated Annealing Results.R', echo=TRUE)
cat("\n")
