pullVars <- c()
for (t in cTables) {
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
pullVars <- c(pullVars, vars)
}
for (t in cTables) {
print(t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
pullVars <- c(pullVars, vars)
}
class(cTables)
z <- unlist(cTables)
z
z[1]
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
pullVars <- c(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
pullVars <- c(pullVars, vars)
}
pullVars
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
pullVars <- c(pullVars, vars)
}
cTables <- c("B05006")
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
pullVars <- c(pullVars, vars)
}
pullvars
pullVars <- c()
pullVars
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
pullVars <<- c(pullVars, vars)
}
pullVars
cTables <- strsplit(sTables, " ")
@pullTables <- c("B05006_001E")
pullYear <- 2011
pullSpan <- 5
# Use the ACS package to look up the variable names for each table
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
pullVars <<- c(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
print(vars)
#pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
vars <- lookup@results[,1] %&% "E"
#print(vars)
#pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
#vars <- lookup@results[,1] %&% "E"
#print(vars)
#pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
#lookup <- acs.lookup(table.number = t)
#vars <- lookup@results[,1] %&% "E"
#print(vars)
#pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current values of " %&% t)
lookup <- acs.lookup(table.number = t)
stop()
#vars <- lookup@results[,1] %&% "E"
#print(vars)
#pullVars <<- rbind(pullVars, vars)
}
for (t in cTables) {
print("Printing current values of " %&% t)
acs.lookup(table.number = t)
#vars <- lookup@results[,1] %&% "E"
#pullVars <<- rbind(pullVars, vars)
}
acs.lookup(table.number = "B07008")
z<-acs.lookup(table.number = "B07008")
z@results[,1]
z<-acs.lookup(table.number = "B07001")
z@results[,1]
for (t in cTables) {
print("Printing current value of t: " %&% t)
acs.lookup(table.number = t)
#vars <- lookup@results[,1] %&% "E"
#pullVars <<- rbind(pullVars, vars)
}
pullVars <- c()
for (t in cTables) {
print("Printing current value of t: " %&% t)
acs.lookup(table.number = t)
}
cTables <- cTables[1:2]
cTables
cTables <- c("B05006", "B06007")
for (t in cTables) {
print("Printing current value of t: " %&% t)
acs.lookup(table.number = t)
}
cTables <- c("B05006", "B06007", "B07001")
for (t in cTables) {
print("Printing current value of t: " %&% t)
acs.lookup(table.number = t)
}
cTables <- strsplit(sTables, " ")
cTables
class(cTables)
z <- unlist(cTables)
z
class(z)
cTables <- unlist(strsplit(sTables, " "))
for (t in cTables) {
print("Printing current value of t: " %&% t)
acs.lookup(table.number = t)
}
gc()
dev.off()
gc()
acsPull <- acs.fetch(endyear=2012, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
#---------------------------------------------------------------
## This file makes custom pulls of ACS data using the Census API
#---------------------------------------------------------------
# See Census API documentation at http://www.census.gov/developers/
# See Census ACS documentation at http://www.census.gov/acs/
# Pattern of API pulls is http://api.census.gov/data/2011/acs5?key=<API Key>&get=B05006_001E&for=tract:010100&in=state:17+county:031
# TO DO
# 2. Need to specify all variables, not just table names -- pretty inconvenient ... could use the ACS package for this?
# 3. Try to replace all of this with acs package operations ... currently, the ACS package isn't working for other years
library("acs") # for pulling data
library("plyr") # for renaming variables
library("RCurl")
library("jsonlite")
"%&%" <- function(...){paste(..., sep="")}
apiKey <- "8b24ac0e60205471267cecd02fa45e7575082313" # This is Nick Mader's key
/*----------------*/
/*----------------*/
/* USE CENSUS API */
/*----------------*/
/*----------------*/
# Set up the Pull Request
sTables <- "B05006 B06007 B07001 B07008 B08141 B08301 B09001 B09002 B09010 B10057 B11001 B11003 B11004 B11016 B13002 B13012 B13014 B13016 B15001 B15002 B16001 B17022 B17024 B17026 B23001 B23007 B23008 B25070 B25091 B25115 C17002 C24010"
pullTables <- gsub(" ", ",", sTables)
cTables <- unlist(strsplit(sTables, " "))
@pullTables <- c("B05006_001E")
pullYear <- 2011
pullSpan <- 5
pullYear <- 2011
pullSpan <- 5
myCounties <- c("Cook County", "DuPage County", "Kane County", "Lake County", "McHenry County", "Will County") # This represents Cook County--the seat of Chicago--as well as the "collar" counties - http://en.wikipedia.org/wiki/Collar_counties
myTables <- c("B17026")
myGeo_TractLvl  <- geo.make(state=c("IL"), county=myCounties, tract=c("*"))
pullVarsReq <- paste(pullVars, collapse = "")
pullTables <- "B17036"
pullRequest <- paste("http://api.census.gov/data/", pullYear, "/acs", pullSpan, "?key=", apiKey, "&get=", pullTables, "&for=tract:*&in=state:17+county:031", sep="") # Illinois' FIPs code is 17, and Cook County is FIPS code 031
pullRequest
pullVras
pullTables <- c("B05006_001E")
myCounties <- c("Cook County", "DuPage County", "Kane County", "Lake County", "McHenry County", "Will County") # This represents Cook County--the seat of Chicago--as well as the "collar" counties - http://en.wikipedia.org/wiki/Collar_counties
myTables <- c("B17026")
myGeo_TractLvl  <- geo.make(state=c("IL"), county=myCounties, tract=c("*"))
myGeo_CountyLvl <- geo.make(state=c("IL"), county=myCounties)
# Check/inspect geographies
geo.lookup(state=c("IL"), county=c(""))
geo.lookup(state=c("IL"), county=myCounties)
# Generate Pulls
acsPull <- acs.fetch(endyear=2011, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
acsEstimates <- estimate(acsPull)
acsEstimates
str(acsEstimates)
colnames(acsEstimates)
rownames(acsEstimates)
class(acsEstimates)
head(acsEstimates)
acsPull2011 <- acs.fetch(endyear=2011, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
acsEstimates2011 <- estimate(acsPull2011)
acsPull2012 <- acs.fetch(endyear=2012, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
acsEstimates2012 <- estimate(acsPull2012)
head(acsEstimates2011)
head(acsEstimates2012)
pullReqest
pullRequest
class(acsEstimates2012)
acsEstimates2012$A <- acsEstimates$B17026_001 + 100
acsEstimates$B17026_001 + 100
acsEstimates[,"B17026_001"] + 100
tail(acsEstimates2013)
tail(acsEstimates2012)
acsEstimates2012[,"B17026_001"] + 100
tail(acsEstimates2012)
acsPull2011_1yrCounty <- acs.fetch(endyear=2011, span = 1, geography = myGeo_CountyLvl, table.number=myTables, key = apiKey)
acsEstimates2011_1yrCount <- estimate(acsPull2011_1yrCounty) # acs package warning for spans other than 5: As of the date of this version of the acs package Census API provides only limited data
acsPull2011_1yrCounty <- acs.fetch(endyear=2011, span = 1, geography = myGeo_CountyLvl, table.number=myTables, key = apiKey)
geo.lookup(state=c("IL"), county=myCounties)
acs.lookup
acsPull2011_1yrCounty <- acs.fetch(endyear=2011, span = 1, geography = myGeo_CountyLvl, table.number="DP02", key = apiKey)
acsPull2011_1yrCounty <- acs.fetch(endyear=2012, span = 1, geography = myGeo_CountyLvl, table.number="DP02", key = apiKey)
acsPull2011_1yrCounty
acsPull2011_1yrCounty <- acs.fetch(endyear=2012, span = 1, geography = myGeo_CountyLvl, table.number="DP02_0001", key = apiKey)
acsPull2008 <- acs.fetch(endyear=2008, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
acsEstimates2008 <- estimate(acsPull2008)
acsEstimates2008
acsPull2008
acsPull2009 <- acs.fetch(endyear=2009, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
acsEstimates2009 <- estimate(acsPull2009)
acsPull2009
acsPull2010 <- acs.fetch(endyear=2010, span = 5, geography = myGeo_TractLvl, table.number=myTables, key = apiKey)
?ls
?regex
View(df)
source('~/.active-rstudio-document', echo=TRUE)
mySumFn(5)
mySumFn(5, 6)
myResult <- myFumFn(3, 4)
myResult <- mySumFn(3, 4)
myResult
pullYear <- "2012"
pullSpan  <- 1
pullState <- "Illinois"
pullCtny  <- c("Cook County", "Will County", "Lake County", "Kane County", "McHenry County", "DuPage County")  ## To avoid potentially non-unique pulls, "County" should be specified here
pullTract <- "*"
pullTables <- unlist(strsplit("B01001 B01001A B01001B B01001C B01001D B01001E B01001F B01001G B01001H B01001I B08006 B08008 B08011 B08012 B08013 B15001 B15002 B17001 B12001 B12002 B12006 B17003 B17004 B17005 B19215 B19216 B14004 B14005 B05003 B23001 B23018 B23022 B24012 B24022 B24042 B24080 B24082 B24090 C24010 C24020 C24040 B11001 B11003 B11004 B13002 B13012 B13014 B13016 B17022 B23007 B23008 B25115", split= " "))
# Look up geography codes using the acs package
pullSt <- "IL"
Meta <- read.csv(url(paste0("http://www2.census.gov/acs", pullYear, "_", pullSpan, "yr/summaryfile/Sequence_Number_and_Table_Number_Lookup.txt")), header = TRUE)
View(Meta)
install.packages("shinyapps")
install.packages("devtools")
install.packages("shinyapps")
devtools::install_github('rstudio/shinyapps')
shinyapps::setAccountInfo(name="nsmader", token="36221D8E91443FB81B18595EF45743CF", secret="cxnSycMlXDCXj6sbJUTzzMl3F5RUFheHa4oDGlkZ")
#Test code for if we want to run within this function
pullYear = 2009; pullSpan = 1; pullState = "Illinois"; pullSt = "IL"; pullGeos = myGeos; pullTables = myTables; dirMetaFiles = dirSave; dirDl = dirDl; downloadData = TRUE # myTables
print(paste0("Downloading and extracting ACS ", pullYear, " ", pullSpan, " year data for ", "state =  ", pullState, " and Geographies = ", paste(pullGeos[,1], collapse = ", ")))
#CountyLookup <- geo.lookup(state=pullSt, county=pullCounties)
#pullCountyCodes <- CountyLookup$county[!is.na(CountyLookup$county)]
#----------------------------
### Download and Extract Data
#----------------------------
# Get metadata
if        (pullYear >= 2010) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Sequence_Number_and_Table_Number_Lookup.txt")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/", pullYear, "_ACSSF_By_State_All_Tables/", pullState, "_All_Geographies.zip")
geoFileExt <- "csv"
} else if (pullYear == 2009) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/UserTools/merge_5_6.txt")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Entire_States/Illinois.zip")
geoFileExt <- "txt"
} else if (pullYear == 2008) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/merge_5_6.xls")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Illinois/all_il.zip")
geoFileExt <- "txt"
} else if (pullYear == 2007) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/merge_5_6_final.xls")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Illinois/all_il.zip")
geoFileExt <- "txt"
} else if (pullYear == 2006) {
metaPath   <- paste0("acs", pullYear, "/summaryfile/merge_5_6_final.xls")
remoteData <- paste0("acs", pullYear, "/summaryfile/Illinois/il_all_2006.zip")
geoFileExt <- "txt"
}
#--------------#
# Get metadata #
#--------------#
myMetaFileName <- paste0("MetaFile_ACS_", pullYear, "_", pullSpan, "Year.csv")
if (file.exists(paste0(dirMetaFiles, myMetaFileName))) {
Meta <- read.csv(paste0(dirMetaFiles, myMetaFileName), header = T)
} else {
metaExt <- substr(metaPath, nchar(metaPath) - 2, nchar(metaPath))
if (metaExt == "txt") {
Meta <- read.csv(url(paste0("http://www2.census.gov/", metaPath)), header = TRUE)
} else if (metaExt == "xls") {
Meta <- read.xls(paste0("http://www2.census.gov/", metaPath))
}
colnames(Meta) <- c("File.ID", "Table.ID", "Sequence.Number", "Line.Number", "Start.Position", "Total.Cells.in.Table", "Total.Cells.in.Sequence", "Table.Title", "Subject.Area")
write.csv(Meta, paste0(dirMetaFiles, myMetaFileName))
}
#----------#
# Get data #
#----------#
myFileName <- paste0("ACS_", pullYear, "_", pullSpan, "Year_", pullSt, ".zip")
myPathFileName <- paste0(dirDl, myFileName)
remoteDataName <- paste0("http://www2.census.gov/", remoteData)
if (downloadData == TRUE & !file.exists(myPathFileName)) {
print(paste0("Downloading data: ", myFileName, " from remoteDataName"))
download.file(remoteDataName, myPathFileName)
contents <- unzip(zipfile = myPathFileName, list = T)
moreZips <- contents$Name[grep(".zip", contents$Name)]
# First look inside the zip file to see if there are nested zip files that also need to be unzipped.
# This is the case for census years prior to 2008.
# Unzip downloaded file and any zip files inside of that
unzip(zipfile = myPathFileName)
# NSM: am having problems explicitly feeding an argument to "exdir" for this function.
# For now, it's using the current working directory as the default
sapply(moreZips, function(x) unzip(zipfile = paste0(dirDl, x)))
sapply(moreZips, function(x) file.remove(paste0(dirDl, x)))
}
#-------------#
# Get geodata #
#-------------#
#geoLabels <- read.csv(paste0(dirMetaFiles, "/geofile-fields.csv"), header=T)
# created by hand from documentation
geoFields <- read.csv(paste0(dirMetaFiles, "/geofile-fields-", pullYear, ".csv"), header=T)
if (pullYear >= 2010) {
geoFile <- read.csv(paste0(dirDl, "g", pullYear, pullSpan, tolower(pullSt), ".csv"), header=F)
colnames(geoFile) <- geoFields$Col.Names
} else {
geoFile <- read.fwf(file = paste0(dirDl, "g", pullYear, pullSpan, tolower(pullSt), ".", geoFileExt),
widths = geoFields$Widths,
col.names = geoFields$Col.Names)
}
#----------------------------
### Set Up Metadata for Files
#----------------------------
### Set Up Workspace
rm(list=ls())
"%&%" <- function(...){ paste(..., sep="")}
library(acs) # This package isn't (yet) used directly to download ACS data, since it generates pulls using the Census API, and
#   only a subset of Census data sets are available through the API. However, it has some useful helper functions to
#   find codes for tables and geographies
library(gdata)
try(setwd("C:/Users/imorey/Documents/GitHub/acs-shop-cook-serve"), silent = T)
try(setwd("/home/nick/GitHub/acs-shop-cook-serve"), silent = T)
try(setwd("C:/Users/nmader/Documents/GitHub/acs-shop-cook-serve"), silent = T)
dirRoot <- getwd()
dirScripts <- dirRoot %&% "/scripts/"
dirDl      <- dirRoot %&% "/data/raw-downloads/"
dirSave    <- dirRoot %&% "/data/prepped-data/"
dirMetaFiles <- dirSave
setwd(dirDl)
for (d in c(dirRoot, dirScripts, dirDl, dirSave)) {
dd <- ifelse(substr(d, nchar(d), nchar(d))=="/", substr(d, 1, nchar(d)-1), d)
print(file.exists(dd))
if (!file.exists(dd)) {
print(paste("Creating directory", dd))
dir.create(dd)
} else {
}
}
source(dirScripts %&% "/download_acs_fn.r")
#---------------
### Set up pulls
#---------------
downloadData <- TRUE
mySpan  <- 1
myState <- "Illinois"
mySt <- "IL"
myTables <- unlist(strsplit("B01001", split=" ")) # B01001A B01001B B01001C B01001D B01001E B01001F B01001G B01001H B01001I B08006 B08008 B08011 B08012 B08013 B15001 B15002 B17001 B12001 B12002 B12006 B17003 B17004 B17005 B19215 B14004 B14005 B19216 B05003 B23001 B23018 B23022 B24012 B24022 B24042 B24080 B24082 B24090 C24010 C24020 C24040 B11001 B11003 B11004 B13002 B13012 B13014 B17022 B23007 B23008 B25115 B17010 B17010A B17010B B17010C B17010D B17010E B17010F B17010G B17010H B17010I C23002A C23002B C23002C C23002D C23002E C23002F C23002G C23002H C23002I B20017 B20017A B20017B B20017C B20017D B20017E B20017F B20017G B20017H B20017I C15002 C15002A C15002B C15002C C15002D C15002E C15002F C15002G C15002H C15002I B17018 B20004 B24042 C24040", split= " ")) # Can't find B13016, at least in 2009 data. Look at the MergedMetaFiles.csv file that was created to look for extent of overlap across ACS years.
#myTables <- "B17022"
myGeos <- data.frame(c("Cook County", 050),
c("Will County", 050),
c("Lake County", 050),
c("Kane County", 050),
c("McHenry County", 050),
c("DuPage County", 050),
c("Chicago city", 160),
c("Chicago city", 312))
myGeos <- data.frame(t(myGeos))
colnames(myGeos) <- c("Place", "SumLevel")
rownames(myGeos) <- NULL
# Also note that these levels can be looked up using the geo.lookup function in the "acs" package, although you need to
#   know the level of the geography that you're looking for (e.g. that "Chicago city" is a "place")
# Alternatively, by opening up one of the geographic reference files from the Census downloads (presuming that you've
#   done one already), you can look up summary level information by name of place, e.g. by:
#     geoFile[grepl("Chicago city", geoFile$NAME), c("SUMLEVEL", "NAME")]
#   That search will return all summary levels for which that string can be found. When looking for "Chicago city", the
#   three responses were for summary levels
#     60 : "Chicago city, Cook County, Illinois" which is a State-County-County Subdivision;
#     160: "Chicago city, Illinois" which is a State-Place; and
#     312: "Chicago city, IL, Chicago-Naperville-Joliet, IL-IN-WI Metropolitan Statistical Area.
#
# Look here to look up what each summary level translates to in words (i.e., that 160 is a "State-Place"):
# http://factfinder2.census.gov/help/en/glossary/s/summary_level_code_list.htm
#-----------------
### Call for pulls
#-----------------
#Test code for if we want to run within this function
pullYear = 2009; pullSpan = 1; pullState = "Illinois"; pullSt = "IL"; pullGeos = myGeos; pullTables = myTables; dirMetaFiles = dirSave; dirDl = dirDl; downloadData = TRUE # myTables
print(paste0("Downloading and extracting ACS ", pullYear, " ", pullSpan, " year data for ", "state =  ", pullState, " and Geographies = ", paste(pullGeos[,1], collapse = ", ")))
#CountyLookup <- geo.lookup(state=pullSt, county=pullCounties)
#pullCountyCodes <- CountyLookup$county[!is.na(CountyLookup$county)]
#----------------------------
### Download and Extract Data
#----------------------------
# Get metadata
if        (pullYear >= 2010) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Sequence_Number_and_Table_Number_Lookup.txt")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/", pullYear, "_ACSSF_By_State_All_Tables/", pullState, "_All_Geographies.zip")
geoFileExt <- "csv"
} else if (pullYear == 2009) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/UserTools/merge_5_6.txt")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Entire_States/Illinois.zip")
geoFileExt <- "txt"
} else if (pullYear == 2008) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/merge_5_6.xls")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Illinois/all_il.zip")
geoFileExt <- "txt"
} else if (pullYear == 2007) {
metaPath   <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/merge_5_6_final.xls")
remoteData <- paste0("acs", pullYear, "_", pullSpan, "yr/summaryfile/Illinois/all_il.zip")
geoFileExt <- "txt"
} else if (pullYear == 2006) {
metaPath   <- paste0("acs", pullYear, "/summaryfile/merge_5_6_final.xls")
remoteData <- paste0("acs", pullYear, "/summaryfile/Illinois/il_all_2006.zip")
geoFileExt <- "txt"
}
#--------------#
# Get metadata #
#--------------#
myMetaFileName <- paste0("MetaFile_ACS_", pullYear, "_", pullSpan, "Year.csv")
if (file.exists(paste0(dirMetaFiles, myMetaFileName))) {
Meta <- read.csv(paste0(dirMetaFiles, myMetaFileName), header = T)
} else {
metaExt <- substr(metaPath, nchar(metaPath) - 2, nchar(metaPath))
if (metaExt == "txt") {
Meta <- read.csv(url(paste0("http://www2.census.gov/", metaPath)), header = TRUE)
} else if (metaExt == "xls") {
Meta <- read.xls(paste0("http://www2.census.gov/", metaPath))
}
colnames(Meta) <- c("File.ID", "Table.ID", "Sequence.Number", "Line.Number", "Start.Position", "Total.Cells.in.Table", "Total.Cells.in.Sequence", "Table.Title", "Subject.Area")
write.csv(Meta, paste0(dirMetaFiles, myMetaFileName))
}
#----------#
# Get data #
#----------#
myFileName <- paste0("ACS_", pullYear, "_", pullSpan, "Year_", pullSt, ".zip")
myPathFileName <- paste0(dirDl, myFileName)
remoteDataName <- paste0("http://www2.census.gov/", remoteData)
if (downloadData == TRUE & !file.exists(myPathFileName)) {
print(paste0("Downloading data: ", myFileName, " from remoteDataName"))
download.file(remoteDataName, myPathFileName)
contents <- unzip(zipfile = myPathFileName, list = T)
moreZips <- contents$Name[grep(".zip", contents$Name)]
# First look inside the zip file to see if there are nested zip files that also need to be unzipped.
# This is the case for census years prior to 2008.
# Unzip downloaded file and any zip files inside of that
unzip(zipfile = myPathFileName)
# NSM: am having problems explicitly feeding an argument to "exdir" for this function.
# For now, it's using the current working directory as the default
sapply(moreZips, function(x) unzip(zipfile = paste0(dirDl, x)))
sapply(moreZips, function(x) file.remove(paste0(dirDl, x)))
}
#-------------#
# Get geodata #
#-------------#
#geoLabels <- read.csv(paste0(dirMetaFiles, "/geofile-fields.csv"), header=T)
# created by hand from documentation
geoFields <- read.csv(paste0(dirMetaFiles, "/geofile-fields-", pullYear, ".csv"), header=T)
if (pullYear >= 2010) {
geoFile <- read.csv(paste0(dirDl, "g", pullYear, pullSpan, tolower(pullSt), ".csv"), header=F)
colnames(geoFile) <- geoFields$Col.Names
} else {
geoFile <- read.fwf(file = paste0(dirDl, "g", pullYear, pullSpan, tolower(pullSt), ".", geoFileExt),
widths = geoFields$Widths,
col.names = geoFields$Col.Names)
}
#----------------------------
### Set Up Metadata for Files
#----------------------------
x <- levels(Meta$Line.Number)[Meta$Line.Number]
y <- as.numeric(levels(Meta$Line.Number)[Meta$Line.Number])
View(x,y)
View(cbind(x,y))
.libPaths()
source('~/GitHub/canopy/code/data-prep/prep-basketball-pilot-data.r', echo=TRUE)
