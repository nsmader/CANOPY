source("./code/run-canopy/declare-canopy-method.r")
"%&%" <- function(...){paste(..., sep="")}
library(plyr) # Need to use join()
library(data.table) # To race against join() and other methods of merging tables for speed
require(compiler)
#enableJIT(3)
enableJIT(0)
#####################
# Set Run Parameters
#####################
nIter       <- 3e5
nCheckPoint <- ceiling(nIter/50) # 6e3
#############################################################
# Set Up Initialization, Objective, Neighbors and Temperature
#############################################################
load("./data/prepped/youth-to-court-data.Rda")
x_ij <- y2c
x_ij$i <- x_ij$y.id
x_ij$j <- x_ij$c.id
NC <- nrow(x_ij) # N is the number of youth, C(i) is the choice set available to individual
NC <- nrow(x_ij)
i.u <- unique(x_ij$i)
j.u <- unique(x_ij$j)
N <- length(i.u)
J <- length(j.u)
load("./data/prepped/court-to-court-distances.Rda")
# Reduce the size of objects to practically test timing
iSub <- sample(i.u, 50000)
jSub <- sample(j.u, 50)
x_ij <- x_ij[x_ij$y.id %in% iSub, ]
x_ij <- x_ij[x_ij$c.id %in% jSub, ]
c2c <- c2c[jSub, jSub]
# Reset the sizes of objects
NC <- nrow(x_ij)
i.u <- unique(x_ij$y.id)
j.u <- unique(x_ij$c.id)
N <- length(i.u)
J <- length(j.u)
# Determine weight for youth in objective
x_ij$w[x_ij$pov == "n200_.FPL"  ] <- 1
x_ij$w[x_ij$pov == "n100_199FPL"] <- 2
x_ij$w[x_ij$pov == "n50_99FPL"  ] <- 3
x_ij$w[x_ij$pov == "n0_50FPL"   ] <- 4
#-------------------------------------------#
# # # Set Initial Allocation and Counts # # #
#-------------------------------------------#
# Starting resources are equal number of staff as sites
s_j <- cbind(j.u, 1)
colnames(s_j) <- c("j", "s")
# Also break out these columns as vectors to see if their use can speed of runs of Obj()
j.u <- as.vector(j.u)
s0  <- as.vector(s_j[,2])
# Set lower and upper bounds
vLowerBound <- as.vector(rep(0, J))
vUpperBound <- as.vector(rep(J, J)) # This is effectively unconstrained, except at zero below
#----
# # # Preallocating space/precalculating objects used in the Objective call
#----
# Precalculate what we'll need in xs_ij
xs_ij <- merge(x_ij, s_j, by = "j")
xs_ij <- within(xs_ij, {
#e <- rnorm(NC)
xb <- -1.5 + (-1.0)*d + (-2.0)*d*cr
#eXb <- exp(xb)
V <- exp(xb + 0.5*s)
})
hist(xs_ij$xb) # if properly tuned, should have decent density both above and below 0
V_ij <- data.table(xs_ij[, c("i", "j", "V")], key = "i")
w_i <- as.matrix(unique(xs_ij[order(xs_ij$i), c("i", "w")]))
upVal <- exp(+1*0.5); downVal <- exp(-1*0.5)
jFrom <- sample(j.u, 1); jTo <- sample(j.u, 1)
jFrom
jTo
from_ij <- V_ij$j == jFrom; to_ij <- V_ij$j == jTo
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
#       sumV <- V_ij[, sum(V), by=i]
#       vSumExbs <- as.vector(sumV$V1)
vSumExbs <- as.vector(V_ij[, sum(V), by=i]$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
#       sumV <- V_ij[, sum(V), by=i]
#       vSumExbs <- as.vector(sumV$V1)
vSumExbs <- as.vector(V_ij[, sum(V), by=i]$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
#       sumV <- V_ij[, sum(V), by=i]
#       vSumExbs <- as.vector(sumV$V1)
vSumExbs <- as.vector(V_ij[, sum(V), by=i]$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
sumV
i.n
length(i.u)
head(w_i)
nrow(w_i)
?data.table
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*downVal
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*upVal
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
score <- 0
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*downVal
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*upVal
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*downVal
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*upVal
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*downVal
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*upVal
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*downVal
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*upVal
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
nrow(VUpd)
nrow(V_ij)
system.time(VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1))
system.time(VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1))
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
head(VUpd)
VSums <- dt[, lapply(.SD, sum), by=i, .SDcols=c("V", "V2")]
VSums <- dt[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
head(VSums)
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
#VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
#VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- VSums$V2 / (1 + VSums$V2) - VSums$V / (1 + VSums$V)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
#VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
#VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- VSums$V2 / (1 + VSums$V2) - VSums$V / (1 + VSums$V)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
#VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
#VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- VSums$V2 / (1 + VSums$V2) - VSums$V / (1 + VSums$V)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
#VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
#VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- VSums$V2 / (1 + VSums$V2) - VSums$V / (1 + VSums$V)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*downVal
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*upVal
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
pDiff_i <- (VSums$V2 / (1 + VSums$V2)) - (VSums$V / (1 + VSums$V))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(for (i in 1:100) VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
system.time(for (i in 1:100) VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")])
VSums <- VUpd[, lapply(.SD, sum), by="i", .SDcols=c("V", "V2")]
system.time({
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({ for (i in 1:100)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({ for (i in 1:100)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({ for (i in 1:100)
VUpd$V2[VUpd$j == jFrom] <- VUpd$V2[VUpd$j == jFrom]*downVal
VUpd$V2[VUpd$j == jTo  ] <- VUpd$V2[VUpd$j == jTo  ]*upVal
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V2 <- VUpd$V
})
system.time(iUpd <- V_ij$i[from_ij | to_ij])
sytem.time(VUpd <- V_ij[V_ij$i %in% iUpd,])
system.time(VUpd <- V_ij[V_ij$i %in% iUpd,])
system.time(VUpd <- V_ij[V_ij$i %in% iUpd,])
solve(matrix(runif(144), nrow = 12))
system.time(solve(matrix(runif(144), nrow = 12)))
system.time(solve(matrix(runif(144), nrow = 12)))
?system.time
proc.time()
?mad
syste.mtime(VUpd$V2 <- VUpd$V)
system.time(VUpd$V2 <- VUpd$V)
system.time(VUpd$V2 <- VUpd$V)
syste.mtime(iUpd <- V_ij[from_ij, "i"])
system.time(iUpd <- V_ij[from_ij, "i"])
system.time(iUpd <- V_ij[from_ij, "i"])
system.time(iUpd <- V_ij[from_ij | to_ij, "i"])
system.time(iUpd <- V_ij[from_ij | to_ij, "i"])
system.time(iUpd <- V_ij[from_ij | to_ij, "i"])
system.time(iUpd <- V_ij[from_ij | to_ij, "i"])
system.time(iUpd <- V_ij[from_ij | to_ij, "i"])
system.time(for (i in 1:100) iUpd <- V_ij[from_ij | to_ij, "i"])
class(V_ij)
system.time(from_ij | to_ij)
system.time(for (i in 1:100) from_ij | to_ij)
system.time(for (i in 1:100) from_ij | to_ij)
system.time(for (i in 1:100) iUpd <- V_ij$i[from_ij | to_ij]) # This seems to take up a lot of clock time: 0.03
length(from_ij)
?R
head(s_j)
w_j <- V_ij[, sum(w), by = j]
head(V_ij)
w_j <- x_ij[, sum(w), by = j]
ws_j <- x_ij[, sum(w), by = j]
w_j <- xs_ij[, sum(w), by = j]
head(xs_ij)
xs_ij <- data.table(xs_ij, key="i,j")
w_j <- xs_ij[, sum(w), by = j]
w <- sum(w)
w <- sum(w_j)
w_j <- w_j / w
head(w_j)
w_j <- xs_ij[, sum(w), by = j][,2]
head(w_j)
w_j <- xs_ij[, sum(w), by = j]
w_j
w_j <- xs_ij[, sum(w), by = j]$V1
w <- sum(w_j)
w_j <- w_j / w
head(w_j)
sum(w_j)
V_ij$s.pov <- w_j * R
n_j <- xs_ij[, length(w), by = j]
n_j
z <- table(xs_ij$j)
z
