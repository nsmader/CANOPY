sumV <- V_ij[, sum(V), by=i]
p_i <- sumV$V1 / (1 + sumV$V1)
hist(p_i)
xs_ij <- within(xs_ij, {
#e <- rnorm(NC)
xb <- -0.5 + (-1.0)*d + (-2.0)*d*cr
#eXb <- exp(xb)
V <- exp(xb + 0.5*s)
})
hist(xs_ij$xb) # if properly tuned, should have decent density both above and below 0
V_ij <- data.table(xs_ij[, c("i", "j", "V")], key = "i")
sumV <- V_ij[, sum(V), by=i]
p_i <- sumV$V1 / (1 + sumV$V1)
hist(p_i)
xs_ij <- within(xs_ij, {
#e <- rnorm(NC)
xb <- -1.5 + (-1.0)*d + (-2.0)*d*cr
#eXb <- exp(xb)
V <- exp(xb + 0.5*s)
})
hist(xs_ij$xb) # if properly tuned, should have decent density both above and below 0
V_ij <- data.table(xs_ij[, c("i", "j", "V")], key = "i")
sumV <- V_ij[, sum(V), by=i]
p_i <- sumV$V1 / (1 + sumV$V1)
hist(p_i)
obj <- function(V_ij){
sumV <- V_ij[, sum(V), by=i]
p_i <- sumV$V1 / (1 + sumV$V1)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(obj(V_ij))
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
obj <- function(V_ij){
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(obj(V_ij))
system.time(obj(V_ij))
system.time(obj(V_ij))
system.time(for (i in 1:100) obj(V_ij))
5*60*60
100000/5*60*60
100000/(5*60*60)
(5*60*60)/100000
(5*60)/100000
V_ij[1:10,]
V_ij$n <- 1:nrow(V_ij)
head(V_ij)
V_ij$n[2:5] <- "A"
head(V_ij)
5*60/100000
Obj <- function(V_ij, jFrom, jTo, ){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
V_ij[j == jFrom, V_ij] <- V_ij[j == jFrom, V_ij]*exp(-1*0.5)
V_ij[j == jTo,   V_ij] <- V_ij[j == jTo, V_ij]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:100) obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
sample(j.u, 1)
system.time(for (i in 1:100) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo, ){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
V_ij[j == jFrom, V_ij] <- V_ij[j == jFrom, V_ij]*exp(-1*0.5)
V_ij[j == jTo,   V_ij] <- V_ij[j == jTo, V_ij]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:100) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo, ){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
V_ij[V_ij$j == jFrom, V_ij] <- V_ij[j == jFrom, V_ij]*exp(-1*0.5)
V_ij[V_ij$j == jTo,   V_ij] <- V_ij[j == jTo,   V_ij]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
jFrom <- sample(j.u, 1); jTo <- sample(j.u, 1)
V_ij[V_ij$j == jFrom, V_ij] <- V_ij[j == jFrom, V_ij]*exp(-1*0.5)
V_ij[V_ij$j == jFrom, V] <- V_ij[j == jFrom, V_ij]*exp(-1*0.5)
V_ij[V_ij$j == jFrom, V] <- V_ij[V_ij$j == jFrom, V]*exp(-1*0.5)
V_ij[V_ij$j == jFrom, V_ij$V] <- V_ij[V_ij$j == jFrom, V_ij$V]*exp(-1*0.5)
V_ij[V_ij$j == jFrom, V_ij$V] <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
V_ij$j == jFrom
z <- V_ij$j == jFrom
sum(z)
z <- V_ij$V[V_ij$j == jFrom]
sum(z)
z <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
sum(z)
V_ij$V[V_ij$j == jFrom] <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
V_ij$V[V_ij$j == jTo  ] <- V_ij$V[V_ij$j == jTo  ]*exp(+1*0.5)
Obj <- function(V_ij, jFrom, jTo, ){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
V_ij$V[V_ij$j == jFrom] <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
V_ij$V[V_ij$j == jTo  ] <- V_ij$V[V_ij$j == jTo  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:100) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
V_ij$V[V_ij$j == jFrom] <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
V_ij$V[V_ij$j == jTo  ] <- V_ij$V[V_ij$j == jTo  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
V_ij$V[V_ij$j == jFrom] <- V_ij$V[V_ij$j == jFrom]*exp(-1*0.5)
V_ij$V[V_ij$j == jTo  ] <- V_ij$V[V_ij$j == jTo  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:100) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:100) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
system.time(V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5))
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
system.time(V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5))
system.time(V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
iUpd <- V_ij$i[from_ij | to_ij]
length(iUpd)
N
sumV <- V_ij[, sum(V), by=i]
system.time(sumV <- V_ij[, sum(V), by=i])
system.time({from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
iUpd <- V_ij$i[from_ij | to_ij]
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
iUpd <- V_ij$i[from_ij | to_ij]})
system.time({V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V <- V_ij$V*exp(-1*0.5)
V_ij$V <- V_ij$V*exp(+1*0.5)})
system.time({
V_ij$V <- V_ij$V*exp(-1*0.5)
V_ij$V <- V_ij$V*exp(+1*0.5)})
system.time({V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
from_ij <- V_ij$j == jFrom; to_ij <-V_ij$j == jTo
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd]
system.time({
VUpd$V <- VUpd$V*exp(-1*0.5)
VUpd$V <- VUpd$V*exp(+1*0.5)})
class(VUpd)
system.time({
V_ij$V <- V_ij$V*exp(-1*0.5)
V_ij$V <- V_ij$V*exp(+1*0.5)})
VUpd <- V_ij[V_ij$i %in% iUpd,]
system.time({
VUpd$V <- VUpd$V*exp(-1*0.5)
VUpd$V <- VUpd$V*exp(+1*0.5)})
system.time({
VUpd$V <- VUpd$V*exp(-1*0.5)
VUpd$V <- VUpd$V*exp(+1*0.5)})
system.time({
VUpd$V <- VUpd$V*exp(-1*0.5)
VUpd$V <- VUpd$V*exp(+1*0.5)})
system.time({
VUpd$V <- VUpd$V*exp(-1*0.5)
VUpd$V <- VUpd$V*exp(+1*0.5)})
system.time({
VUpd$V[from_ij] <- VUpd$V[from_ij]*exp(-1*0.5)
VUpd$V[to_ij  ] <- VUpd$V[to_ij  ]*exp(+1*0.5)})
system.time({
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]})
system.time({
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order. doing this, because identical is turning up false
score <- t(w_i[,2]) %*% p_i #sum(w_i*p_i)
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)})
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VSumPre
score <- 1
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
V_ij$V[from_ij] <- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
system.time({
iUpd <- V_ij$i[from_ij | to_ij]
VUpd <- V_ij[V_ij$i %in% iUpd,]
VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)
VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
})
system.time({
V_ij$V[from_ij] <<- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <<- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
})
Obj <- function(V_ij, jFrom, jTo){ # fromDelta, toDelta # ... the Deltas are always -1 and 1 in this implementation
from_ij <- V_ij$j == jFrom; to_ij <- V_ij$j == jTo
# Approach of modifying all records, without time cost of subsetting
#system.time({
V_ij$V[from_ij] <<- V_ij$V[from_ij]*exp(-1*0.5)
V_ij$V[to_ij  ] <<- V_ij$V[to_ij  ]*exp(+1*0.5)
sumV <- V_ij[, sum(V), by=i]
vSumExbs <- as.vector(sumV$V1)
p_i <- as.vector(vSumExbs / (1 + vSumExbs))
#table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
t(w_i[,2]) %*% p_i
#})
# Approach of subsetting records, to modify just those affected by the change
# XXX Note: updates to V_ij aren't saved for the next iteration.
# Thus, we'd need to join the new V values back to the original data set, which likely makes this
#   close to equivalent with the approach above.
#     system.time({
#       iUpd <- V_ij$i[from_ij | to_ij]
#       VUpd <- V_ij[V_ij$i %in% iUpd,]
#       VSumPre <- as.vector(VUpd[, sum(V), by=i]$V1)
#
#       VUpd$V[VUpd$j == jFrom] <- VUpd$V[VUpd$j == jFrom]*exp(-1*0.5)
#       VUpd$V[VUpd$j == jTo  ] <- VUpd$V[VUpd$j == jTo  ]*exp(+1*0.5)
#
#       VSumPost <- as.vector(VUpd[, sum(V), by=i]$V1)
#       pDiff_i <- VSumPost / (1 + VSumPost) - VSumPre / (1 + VSumPre)
#       #table(w_i[,1] == sumV$i) # Checking that youth ids are in the same order.
#       score <- score + t(w_i[w_i[,1] %in% iUpd,2]) %*% pDiff_i
#     })
}
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
system.time(for (i in 1:1) Obj(V_ij, sample(j.u, 1), sample(j.u, 1)))
c2c.inv <- 1/c2c
diag(c2c.inv) <- 0 # Otherwise, this is infinite
J == nrow(c2c.inv)
ReAlloc <- function(s0, TransMatrix, vLower, vUpper) {
# Randomly select a courts to pull seat from
EligFrom <- (1:J)[s0!=vLower]
FromRow <- sample(EligFrom, 1)
# print(paste("FromRow =", FromRow))
# Randomly select a community area to send seat to
EligTo <- (1:J)[s0!=vUpper]
vTransProbs <- TransMatrix[FromRow, EligTo]/sum(TransMatrix[FromRow, EligTo])
vCumTransProbs <- cumsum(vTransProbs)
ToRow <- findInterval(runif(1), vCumTransProbs)
# print(paste("ToRow =", ToRow))
# Reassign -- modify s0 to be s_prop when it is returned
s0[FromRow] <- s0[FromRow] - 1
s0[ToRow]   <- s0[ToRow]   + 1
return(s0)
}
system.time(for (i in 1:1) ReAlloc(s0, TransMatrix = c2c.inv, vLowerBound, vUpperBound))
j.u <- as.vector(j.u)
s0  <- as.vector(s_j$s)
class(s_j)
s0  <- as.vector(s_j[,2])
names(s0)
colnames(s_j)
system.time(for (i in 1:1) ReAlloc(s0, TransMatrix = c2c.inv, vLowerBound, vUpperBound))
system.time(for (i in 1:100) ReAlloc(s0, TransMatrix = c2c.inv, vLowerBound, vUpperBound))
system.time(for (i in 1:1000) ReAlloc(s0, TransMatrix = c2c.inv, vLowerBound, vUpperBound))
nrow(y2c)
length(unique(y2c$y.id))
length(unique(y2c$c.id))
