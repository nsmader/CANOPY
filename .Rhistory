povNs.e$n0_50FPL    <- povNs.e[, "12 to 17 years: Under .50 "]
povNs.e$n50_99FPL   <- povNs.e[, "12 to 17 years: .50 to .74 "]   + povNs.e[, "12 to 17 years: .75 to .99 "]
povNs.e$n100_199FPL <- povNs.e[, "12 to 17 years: 1.00 to 1.24 "] + povNs.e[, "12 to 17 years: 1.25 to 1.49 "] +
povNs.e[, "12 to 17 years: 1.50 to 1.74 "] + povNs.e[, "12 to 17 years: 1.75 to 1.84 "] +
povNs.e[, "12 to 17 years: 1.85 to 1.99 "]
povNs.e$n200_.FPL   <- povNs.e[, "12 to 17 years: 2.00 to 2.99 "] + povNs.e[, "12 to 17 years: 3.00 to 3.99 "] +
povNs.e[, "12 to 17 years: 4.00 to 4.99 "] + povNs.e[, "12 to 17 years: 5.00 and over "]
povNs.e <- within(povNs.e, {
tractName <- rownames(povNs.e)
tractStr <- sapply(tractName, function(s) substr(s, 14, str_locate(s, ",")[1]-1))
tractNum <- as.numeric(tractStr)
tract6 <- sub("[.]", "", as.character(sprintf("%07.2f", tractNum)))
# Note: we need the "[.]" because sub() uses regular expressions.
# In regular expressions, "." is a wildcard rather than a literal.
})
myFpls <- grep("^n", colnames(povNs.e), value = T)
myNs <- povNs.e[, c("tract6", myFpls)]
# Create synthetic individual youth file
#
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
data.frame(cbind(myT, rep(myFpl, times = n)))
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, times = nMyFpls))
povNs <- acs.fetch(endyear = 2012, span = 5, geography = myGeo, table.name = "B17024", col.names = "pretty", key = apiKey)
myGeo <- geo.make(state = "IL", county = "Cook", tract = "*") # ,  place = "Chicago city",
povNs <- acs.fetch(endyear = 2012, span = 5, geography = myGeo, table.name = "B17024", col.names = "pretty", key = apiKey)
povNs <- acs.fetch(endyear = 2012, span = 5, geography = myGeo, table.name = "B17024", col.names = "pretty") #key = apiKey
povNs.e <- data.frame(povNs@estimate)
colnames(povNs.e) <- colnames(povNs@estimate)
colnames(povNs.e) <- gsub("Age by Ratio of Income to Poverty Level in the Past 12 Months:  ", "", colnames(povNs.e))
povNs.e$n0_50FPL    <- povNs.e[, "12 to 17 years: Under .50 "]
povNs.e$n50_99FPL   <- povNs.e[, "12 to 17 years: .50 to .74 "]   + povNs.e[, "12 to 17 years: .75 to .99 "]
povNs.e$n100_199FPL <- povNs.e[, "12 to 17 years: 1.00 to 1.24 "] + povNs.e[, "12 to 17 years: 1.25 to 1.49 "] +
povNs.e[, "12 to 17 years: 1.50 to 1.74 "] + povNs.e[, "12 to 17 years: 1.75 to 1.84 "] +
povNs.e[, "12 to 17 years: 1.85 to 1.99 "]
povNs.e$n200_.FPL   <- povNs.e[, "12 to 17 years: 2.00 to 2.99 "] + povNs.e[, "12 to 17 years: 3.00 to 3.99 "] +
povNs.e[, "12 to 17 years: 4.00 to 4.99 "] + povNs.e[, "12 to 17 years: 5.00 and over "]
povNs.e <- within(povNs.e, {
tractName <- rownames(povNs.e)
tractStr <- sapply(tractName, function(s) substr(s, 14, str_locate(s, ",")[1]-1))
tractNum <- as.numeric(tractStr)
tract6 <- sub("[.]", "", as.character(sprintf("%07.2f", tractNum)))
# Note: we need the "[.]" because sub() uses regular expressions.
# In regular expressions, "." is a wildcard rather than a literal.
})
myFpls <- grep("^n", colnames(povNs.e), value = T)
myNs <- povNs.e[, c("tract6", myFpls)]
# Create synthetic individual youth file
#
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
data.frame(cbind(myT, rep(myFpl, times = n)))
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, times = nMyFpls))
miniSynth <- synth[1:2]
miniSynth
miniSynth[1]
miniSynth[2]
unlist(miniSynth)
class(miniSynth)
typeof(miniSynth)
m <- data.frame(miniSynth)
lapply(miniSynth, as.character)
ms <- synth[1:2]
ms[1]
as.character(ms[1])
ms.df <- data.frame(ms)
ms.df <- data.frame(ms[1])
ms.df
table(ms.df[,2])
typeof(ms.df[,2])
ms.df[,2] <- as.character(ms.df[,2])
typeof(ms.df[,2])
sapply(ms, function(x) data.frame(x[,1],as.character(x[,2])))
y <- sapply(ms, function(x) data.frame(x[,1],as.character(x[,2])))
y
str(ms)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
rep(myNs$tract6, each = nMyFpls)
rep(myFpls, times = nMyTracts)
miniSynth <- synth[1:2]
ms <- data.frame(synth[1:2])
x <- ms
y <- data.frame(as.character(x[,1]), as.character(x[,2])
)
x <- ms[1]
y <- data.frame(as.character(x[,1]), as.character(x[,2]))
str(x)
myT <- "010100"
myFpl <- "n0_50FPL"
n <- myNs[myNs$tract6 == myT, myFpl]
n
m <- cbind(myT, rep(myFpl, times = n))
m
typeof(m)
mc <- as.character(m)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
m <- cbind(myT, rep(myFpl, times = n))
mc <- as.character(m)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
data.frame(synth)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
cbind(myT, rep(myFpl, times = n))
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
classof(synth)
class(synth)
type(synth)
typeof(synth)
u <- unlist(synth)
head(u)
length(u)
dim(u)
classof(u)
class(u)
typeof(u)
ms <- synth[1:2]
ms
unlist(ms)
data.frame(ms)
df <- data.frame(matrix(unlist(ms), ncol=2))
df
ms
attr(ms)
?attr
u <- unlist(ms)
u
?data.frame
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- data.frame(rep(myFpl, times = n))
colnames(p) <- "myT"
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
u
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- data.frame(rep(myFpl, times = n))
colnames(p) <- "myT"
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
u
ms
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- rep(myFpl, times = n)
colnames(p) <- "myT"
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- rep(myFpl, times = n)
names(p) <- "myT"
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- rep(myFpl, times = n)
names(p) <- myT
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- vector(rep(myFpl, times = n))
names(p) <- myT
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- as.vector(rep(myFpl, times = n))
names(p) <- myT
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- matrix(rep(myFpl, times = n))
names(p) <- myT
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
p <- matrix(rep(myFpl, times = n))
colnames(p) <- myT
return(p)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
u <- unlist(ms)
ms
u <- unlist(ms)
u
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
cbind(myT, rep(myFpl, times = n))
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
ms
unlist(ms)
u <- matrix(unlist(ms), ncol = 2)
u
u <- matrix(unlist(ms), ncol = 2, by.row = True)
u <- matrix(unlist(ms), ncol = 2, byrow = True)
u <- matrix(unlist(ms), ncol = 2, byrow = T)
u
u <- matrix(unlist(ms), ncol = 2, byrow = F)
u
unlist(ms)
u <- data.frame(unlist(ms))
u
u <- matrix(unlist(ms), ncol = 2, byrow = T)
u
ms
unlist(ms, recursive = F)
u <- matrix(unlist(ms, recursive = FALSE), ncol = 2, byrow = T)
u
ms1 <- as.matrix(ms[1])
ms1
ms1 <- as.matrix(ms[[1]])
ms1
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
as.matrix(cbind(myT, rep(myFpl, times = n)))
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
ms[1]
ms <- synth[1:2]
u <- matrix(unlist(ms, recursive = FALSE), ncol = 2, byrow = T)
u
class(ms[[1]])
data.frame(ms)
matrix(ms, ncol = 2)
matrix(ms, ncol = 2, byrow=F)
matrix(ms, ncol = 2, byrow=T)
dim(ms[[1]])
ms.m <- matricize(ms[[1]])
matricize <- function(x){
matrix(x, ncol = 2)
}
ms.m <- matricize(ms[[1]])
ms.m
ms.m2 <- matricize(ms[[2]])
data.frame(ms.m, ms.m2)
rbind(ms.m, ms.m2)
rbind(ms)
rplFn <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
matrix(cbind(myT, rep(myFpl, times = n)), ncol=2)
}
nMyFpls   <- length(myFpls)
nMyTracts <- length(myNs$tract6)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
ms <- synth[1:2]
ms
class(ms)
class(ms[[1]])
u <- unlist(ms)
u
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls), simplify=F)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls), simplify=FALSE)
synth <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls), SIMPLIFY=FALSE)
str(synth)
ms <- synth[1:2]
rbind(ms)
ms[[1]]
u <- unlist(ms)
u
rplPov <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
rep(myFpl, times = n)
}
rplTr <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
rep(myT, times = n)
}
synthPov <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
synthTr  <- mapply(rplFn, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
uP <- unlist(synthPov)
uT <- unlist(synthTr)
str(uP)
str(uT)
head(uP)
head(uT)
synthPov <- mapply(rplPov, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
synthTr  <- mapply(rplTr,  rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
uP <- unlist(synthPov)
uT <- unlist(synthTr)
uP
rplPov <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
as.character(rep(myFpl, times = n))
}
rplTr <- function(myFpl, myT){
n <- myNs[myNs$tract6 == myT, myFpl]
as.character(rep(myT, times = n))
}
synthPov <- mapply(rplPov, rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
synthTr  <- mapply(rplTr,  rep(myFpls, times = nMyTracts), rep(myNs$tract6, each = nMyFpls))
uP <- unlist(synthPov)
uT <- unlist(synthTr)
uP
u <- cbind(uP, uT)
head(u)
View(u)
u
youthData <- cbind(uP, uT)
youthData
rownames(youthData) <- ""
colnames(youthData) <- c("Pov", "tract6")
rownames(youthData) <- NULL
colnames(youthData) <- c("Pov", "tract6")
head(youthData)
youthData$Id <- 1:nrow(youthData)
head(youthData)
class(youthData)
youthData <- data.frame(cbind(uP, uT))
youthData <- data.frame(as.character(cbind(uP, uT)))
rownames(youthData) <- NULL
colnames(youthData) <- c("Pov", "tract6")
youthData$Id <- 1:nrow(youthData)
head(youthData)
youthData <- data.frame(as.character(cbind(uP, uT)))
head(youthData)
youthData <- data.frame(cbind(uP, uT))
youthData <- data.frame(as.character(cbind(uP, uT)))
youthData
youthData <- data.frame(cbind(as.character(uP), as.character(uT)))
youthData
rownames(youthData) <- NULL
colnames(youthData) <- c("Pov", "tract6")
youthData$Id <- 1:nrow(youthData)
head(youthData)
dim(youthData)
install.packages("GISTools")
getwd()
sids <- readShapePoly(system.file(".data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
library(GISTools)
sids <- readShapePoly(system.file(".data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids <- readShapePoly(system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
getwd()
file.exists("./data/raw/ball-courts.csv")
file.exists("./data/raw/CensusTractsTIGER2010.shp")
sids <- readShapePoly(system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66"))
?readShapePoly
system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
sids <- readShapePoly(system.file("./data/raw/CensusTractsTIGER2010", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66")) # system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
system.file("./data/raw/CensusTractsTIGER2010", package="maptools")[1]
?system.file
TractCentroids <- data.frame(read.dbf(file = "./data/raw/Chicago_CensusTracts_2010_Centroids.dbf"))
library("foreign") # This is to read the dbf from the shape file
TractCentroids <- data.frame(read.dbf(file = "./data/raw/Chicago_CensusTracts_2010_Centroids.dbf"))
colnames(TractCentroids)
head(TractCentroids$TRACTCE10)
head(TractCentroids)
colnames(youthData)
head(youthData$tract6)
sids <- readShapePoly(system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66")) # system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")
system.file("./data/raw/CensusTractsTIGER2010.shp")
?system.file
library("maptools")
sids <- readShapePoly(system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1],
proj4string=CRS("+proj=longlat +ellps=clrk66")) # system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
?readShapePoly
sids <- readShapePoly("./data/raw/CensusTractsTIGER2010.shp",
proj4string=CRS("+proj=longlat +ellps=clrk66")) # system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
sids <- readShapePoly("./data/raw/CensusTractsTIGER2010.shp")#                         proj4string=CRS("+proj=longlat +ellps=clrk66")) # system.file("./data/raw/CensusTractsTIGER2010.shp", package="maptools")[1]
class(sids)
plot(sids)
writeSpatialShape(sids, "sids")
cents <- coordinates(sids)
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data,
proj4string=CRS("+proj=longlat +ellps=clrk66"))
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data) # proj4string=CRS("+proj=longlat +ellps=clrk66")
points(cents, col = "Blue")
writeSpatialShape(cents, "cents")
centroids <- getSpPPolygonsLabptSlots(sids)
points(centroids, pch = 3, col = "Red")
tractCentroids <- gCentroids("./data/raw/CensusTractsTIGER2010.shp")
source("./code/get-centroids.r")
tractCentroids <- gCentroids("./data/raw/CensusTractsTIGER2010.shp")
str(centroids)
str(cents)
cents
head(cents)
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data, proj4string=CRS("+proj=longlat +ellps=clrk66")) #
cents
sids <- readShapePoly(myFile, proj4string=CRS("+proj=longlat +ellps=clrk66"))
myFile <- "./data/raw/CensusTractsTIGER2010.shp"
sids <- readShapePoly(myFile, proj4string=CRS("+proj=longlat +ellps=clrk66"))
?readShapePoly
CRS(myFile)
cents
head(cents)
class(sids)
?writeSpatialShape
?coordinates
sids <- readShapePoly(myFile, proj4string=CRS("+proj=longlat")) # +ellps=clrk66
sids <- readShapePoly(myFile, proj4string=CRS("+proj=longlat +ellps=GRS80 +datum=NAD83")) #"+proj=longlat +ellps=clrk66"
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data, proj4string=CRS("+proj=latlong +datum=NAD83 ")) #
cents
cents <- SpatialPointsDataFrame(coords=cents, data=sids@data, proj4string=CRS("+proj=latlong +datum=NAD83 ")) #
str(cents)
?SpatialPointsDataFrame
coordinates(cents) <- ~x+y
cents.xy <- cents@coords
coordinates(cents.xy) <- ~x+y
data(meuse)
head(meuse)
data(meuse)
meuse.xy = meuse[c("x", "y")]
coordinates(meuse.xy) <- ~x+y
head(meuse.xy)
library(rgdal)
install.packages("rgdal")
library(rgdal)
project(cents, "+proj=longlat +ellps=WGS84")
?project
cents
str(cents)
project(cents@coords, "+proj=longlat +ellps=WGS84")
project(cents@coords, CRS("+proj=longlat +ellps=WGS84"))
centsLL <- spTransform(cents@coords, CRS("+proj=longlat +datum=WGS84" )
)
library(rgdal)
centsLL <- spTransform(cents@coords, CRS("+proj=longlat +datum=WGS84" ))
?rgdal
install.packages("rgdal")
install.packages("rgdal")
library("rgdal")
centsLL <- spTransform(cents@coords, CRS("+proj=longlat +datum=WGS84" ))
centsLL <- spTransform(cents, CRS("+proj=longlat +datum=WGS84" ))
sids <- readShapePoly(myFile, proj4string=CRS("+proj=longlat +ellps=clrk66"))
sids <- readShapePoly(myFile) #, proj4string=CRS("+proj=longlat +ellps=clrk66")
class(sids)
cents <- coordinates(sids)
centsLL <- spTransform(cents@coords, CRS("+proj=longlat +datum=WGS84" ))
cents
centsLL <- spTransform(cents, CRS("+proj=longlat +datum=WGS84" ))
library(rgdal)
centsLL <- spTransform(cents, CRS("+proj=longlat +datum=WGS84" ))
library("rgdal")
centsLL <- spTransform(cents, CRS("+proj=longlat +datum=WGS84" ))
library(rgdal)
centsLL <- spTransform(cents, CRS("+proj=longlat +datum=WGS84" ))
