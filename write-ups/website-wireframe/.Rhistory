moment.dist.pops <- function(myPars){
# Have t.n x y.n = 6400 parameters to estimate.
#myEst <- data.frame(record.ids, eli = myPars)
# Form regression-based moments
#reg.comp <- merge(pred_ty[, c("t.u", "y", "eli.hat")], myEst, by = c("t.u", "y"), all.y = T)
#reg.comp$diff <- (reg.comp$eli.hat - reg.comp$eli)^2
diff <- (pred - myPars)^2
vReg   <- var(diff)
vReg   <- ifelse(is.na(vReg) | vReg == 0, 1, vReg)
momReg <- sum(diff)
# Form objective
return( momReg) # /vReg
}
pred <- pred_ty$eli.hat[pred_ty$y %in% y.start:y.end]
#init <- pred_ty$eli.hat[pred_ty$y %in% y.start:y.end]
init <- rep(0, length(pred))
#record.ids <- pred_ty[pred_ty$y %in% y.start:y.end, c("t.u", "y")]
#record.ids <- record.ids[1:10,]
moment.dist.pops(init)
system.time(opt <- optim(init, moment.dist.pops, method = "Nelder-Mead")) # control = list(maxit = 100)
opt
system.time(opt <- optim(init, moment.dist.pops, method = "CG")) # control = list(maxit = 100)
opt
parse(text = "2 + 3")
parse(text = "sum(2, 3")
parse(text = "sum(2, 3)")
parse(text = "rnorm(100)")
eval(parse(text = "rnorm(100)"))
x <- data.frame(y = LETTERS[1:6], x = runif(6))
eval(parse(text = "x$y"))
eval(parse(text = "x$y=='E'"))
eval(parse(text = "x$z <- 1:6"))
x
?range
?ddply
library(plyr)
?ddply
?duplicate
?duplicates
?duplicated
?source
?duplicated
?assert
??assert
shiny::runApp('C:/Users/nmader/Google Drive/Thrive Chicago - Engaged in enrichment and academic activities/Data on Schools/cps-compare-pairs-elem')
?switch
source('~/.active-rstudio-document', echo=TRUE)
f.e <- f + runif(nSteps)
ggplot(aes(x=steps, y = f.e)) + geom_point()
library(ggplot2)
ggplot(aes(x = steps, y = f.e)) + geom_point()
df <- data.frame(cbind(steps, f.e))
ggplot(data = df, aes(x = steps, y = f.e)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
head(nSteps - steps)
source('~/.active-rstudio-document', echo=TRUE)
summary(e)
runif(1)
ggplot(data = df, aes(x = steps, y = e)) + geom_point()
summary(df)
df <- data.frame(cbind(steps, f, e, f.e))
summary(df)
?seq
nSteps <- 100000
steps <- seq(0, 1, length = Steps)
f <- (steps - mean(steps))^3
nSteps <- 100000
steps <- seq(0, 1, length = nSteps)
f <- (steps - mean(steps))^3
e <- runif(nSteps) * (nSteps - steps)
f.e <- f + e
df <- data.frame(cbind(steps, f, e, f.e))
ggplot(data = df, aes(x = steps, y = e)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = df, aes(x = steps, y = e)) + geom_point()
e <- runif(nSteps) * (nSteps - steps)
f <- f / max(f) * max(e) * 2
f.e <- f + e
df <- data.frame(cbind(steps, f, e, f.e))
ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df, aes(x = steps, y = f.e)) + geom_point()
head(e)
tail(e)
source('~/GitHub/CANOPY/write-ups/website-wireframe/generate benchmark graph ock-up for wireframe.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = df[seq(1:nrow(df), by = 10)], aes(x = steps, y = f.e)) + geom_point()
ggplot(data = df[seq(1:nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_point()
ggplot(data = df[(1, nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 1),], aes(x = steps, y = f.e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_line()
head(df)
dim(df)
head(df[seq(1, nrow(df), by = 10),])
head(df[seq(1, nrow(df), by = 10),])
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- seq(1, nSteps, by = 1000)
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
plot(x = x, y = f)
summary(f)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- seq(1, nSteps, by = 1000)
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)
f.e <- f + e
plot(x = x, y = f.e)
nrow(x)
length(x)
length(f)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)
f.e <- f + e
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)
f.e <- f + e
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^2
f.e <- f + e
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^2 / max(f) * (1/3)
f.e <- f + e
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^2 / max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
head(df)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^2 / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
summary(df)
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^3 / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
summary(df)
plot(x = x, y = f.e)
e <- e / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
summary(df)
plot(x = x, y = f.e)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^2
e <- e / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
summary(df)
plot(x = x, y = f.e)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_line()
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^3
e <- e / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
summary(df)
#plot(x = x, y = f.e)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = f.e)) + geom_line()
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
df$ts <- f * 26
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") + hline(20)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") + geom_hline(20)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") + geom_hline(aes(20))
summary(df)
df$ts <- f * 10 * 16
summary(df)
# Generate benchmakr graphs mock-up for wireframe
# Characterization: roughly quadratic. Noise is
library(ggplot2)
nSteps <- 100000
steps <- 1:nSteps
#cent <- steps - 0.3*mean(steps)
#f <- 10.0*cent + cent^2+(cent/2)^3
x <- steps / nSteps * 2.5
f <- tanh(x)
e <- runif(nSteps)*(nSteps - steps)^3
e <- e / max(e) * max(f) * (1/3)
f.e <- f + e
df <- data.frame(cbind(steps, x, f, e, f.e))
df$ts <- f * 10 * 16
summary(df)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") + geom_hline(aes(20))
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") + geom_hline(aes(yintercept = 20))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif), cutoff)
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif), unif)
df$unif  <- 12
df$space <- 19
df$pov   <- 22
ggplot(data = df[seq(1, nrow(df), by = 10),], aes(x = steps, y = ts)) + geom_line() +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif), unif)
source('~/.active-rstudio-document', echo=TRUE)
head(df)
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts, linetype = ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif)) +
geom_line(aes(x, space, linetype = space)) +
geom_line(aes(x, pov, linetype = pov))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
df$unif  <- factor(12)
df$space <- factor(19)
df$pov   <- factor(22)
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = unif)) +
geom_line(aes(x, space, linetype = space)) +
geom_line(aes(x, pov, linetype = pov))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
df$unif  <- 12
df$space <- 19
df$pov   <- 22
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, ts)) +
ylab("Targeting Score") +
geom_line(aes(x, unif, linetype = factor(12))) +
geom_line(aes(x, space, linetype = factor(19))) +
geom_line(aes(x, pov, linetype = factor(22)))
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
source('~/.active-rstudio-document', echo=TRUE)
source('~/GitHub/CANOPY/write-ups/website-wireframe/generate benchmark graph mock-up for wireframe.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom", nrow = 2)
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom") + guide_legend(nrow = 2)
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
guide_legend(nrow = 2, label.position = "bottom")
#theme(legend.position = "bottom")
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom")
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom", guide_legend(nrow = 2))
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom") +
guides(linetype = guide_legend(nrow = 2))
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom") +
guides(linetype = guide_legend(nrow = 2)) +
scale_linetype("")
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom") +
guides(linetype = guide_legend(nrow = 2), size = 6) +
scale_linetype("")
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
ggplot(data = df[seq(1, nrow(df), by = 10),]) +
geom_line(aes(x, unif, linetype = factor("TS - Uniform Distribution"))) +
geom_line(aes(x, space, linetype = factor("TS - Alloc Based on Density"))) +
geom_line(aes(x, pov, linetype = factor("TS - Alloc Based on Poverty"))) +
geom_line(aes(x, ts, linetype = factor("CANOPY"))) +
ylab("Targeting Score") +
theme(legend.position = "bottom") +
guides(linetype = guide_legend(nrow = 2), size = 4) +
scale_linetype("")
#guide_legend(nrow = 2, label.position = "bottom")
#
#
#   geom_hline(aes(yintercept = 12)) +
#   geom_hline(aes(yintercept = 19)) +
#   geom_hline(aes(yintercept = 22))
#ggplot(data = df, aes(x = steps, y = e)) + geom_point()
getwd()
setwd("~/GitHub/CANOPY/write-ups/wireframe"))
setwd("~/GitHub/CANOPY/write-ups/wireframe")
setwd("~")
getwd()
setwd("~/GitHub/CANOPY/write-ups/website-wireframe")
ggsave("./benchmark.png")
head(df)
?rowMax
??rowMax
